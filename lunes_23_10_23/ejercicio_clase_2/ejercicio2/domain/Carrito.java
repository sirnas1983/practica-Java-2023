package ejercicio2.domain;

import java.util.HashMap;

public class Carrito {
    
    private Long id;
    private Cliente client;
    private HashMap<Producto, Integer> order;

    private static Long autoGeneratedID = 0l;

    public Carrito() {
    }

    public Carrito(Cliente client) {
        this.id = autoGeneratedID();
        this.client = client;
        this.order = new HashMap<>();
    }

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Cliente getClient() {
        return this.client;
    }

    public void setClient(Cliente client) {
        this.client = client;
    }

    public HashMap<Producto,Integer> getOrder() {
        return this.order;
    }

    public void setOrder(HashMap<Producto,Integer> order) {
        this.order = order;
    }

    public void addProduct(Producto prod, int qty){
        if(qty <= 0){
            System.out.println("Debe ingresar una cantidad mayor que 0");
        } else {
            if(prod.getStock() < qty){
                System.out.println("Solo quedan " + prod.getStock() + " productos en stock");
            } else if(this.getOrder().containsKey(prod)){
                this.modifyQty(prod, qty);
            } else {
                this.getOrder().put(prod, qty);
                prod.buy(qty);;
            }
        }
    }

    public void removeProduct(Producto prod){
        if (this.getOrder().containsKey(prod)){
            this.getOrder().remove(prod);
        } else {
            System.out.println("El producto no esta en su carrito");
        }
    }

    public void modifyQty(Producto prod, int qty){
        if(prod.getStock() < qty){
            System.out.println("Solo quedan " + prod.getStock() + " productos en stock");
        } else {
            if (this.getOrder().get(prod) + qty < 0){
                System.out.println("Solo se van a sacar " + this.getOrder().get(prod) + " unidades.");
                qty = this.getOrder().get(prod);
            }
            this.getOrder().put(prod, this.getOrder().get(prod) + qty);
            prod.buy(qty);
            if (this.getOrder().get(prod) == 0l) {
                this.getOrder().remove(prod);
            }
        }
    }

    private static Long autoGeneratedID(){
        return ++ autoGeneratedID;
    }

    public void carritoToString(){
        this.getOrder().forEach((key, value) ->{
            System.out.println("Id: " + key.getId() + " - " + key.getNombre() + " - cant: " + value);
        });
    }

    public void verCarrito(){
        System.out.println("-".repeat(35));
        System.out.println("CARRITO: ");
        System.out.println("-".repeat(35));
        this.carritoToString();
        System.out.println("-".repeat(35));
        System.out.println("Monto total: " + this.purchaseAmount());
        System.out.println("-".repeat(35));
    }

    public Double purchaseAmount(){
        Double amount = 0d;
        for (Producto prod : this.order.keySet()){
            amount += (prod.getPrecio() * this.order.get(prod));
        };
        return amount;
    }
}
